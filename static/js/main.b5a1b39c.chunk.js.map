{"version":3,"sources":["Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","App","state","advice","ip","zipcode","lat","log","this","fetchAdvice","axios","get","then","response","data","country_name","region","latitude","longitude","setState","console","catch","error","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oSAGe,SAASA,IACtB,OACA,4BAAQC,UAAU,UACZ,yBAAKA,UAAU,8BAAf,UACA,yBAAKA,UAAU,gBAAf,gBACA,yBAAKA,UAAU,gBAAf,kB,IC6DOC,E,4MA9DbC,MAAQ,CACNC,OAAQ,GACRC,GAAG,GACHC,QAAQ,GACRC,IAAI,GACJC,IAAI,I,kEAIHC,KAAKC,gB,oCAGO,IAAD,OACXC,IAAMC,IAAI,0BACRC,MAAK,SAACC,GACL,IAAMV,EAASU,EAASC,KAAKC,aACvBX,EAAKS,EAASC,KAAKV,GACnBC,EAAQQ,EAASC,KAAKE,OACtBV,EAAIO,EAASC,KAAKG,SAClBV,EAAIM,EAASC,KAAKI,UACxB,EAAKC,SAAS,CAAEhB,WAChB,EAAKgB,SAAS,CAAEf,OAChB,EAAKe,SAAS,CAAEd,YAChB,EAAKc,SAAS,CAAEb,QAChB,EAAKa,SAAS,CAAEZ,QAEhBa,QAAQb,IAAIJ,GACZiB,QAAQb,IAAIH,GACZgB,QAAQb,IAAIF,GACZe,QAAQb,IAAID,GACZc,QAAQb,IAAIA,MAIbc,OAAM,SAACC,GACNF,QAAQb,IAAIe,Q,+BAKhB,OAGE,yBAAKtB,UAAU,OAEb,kBAACD,EAAD,MAGA,yBAAKC,UAAU,QACf,wBAAIA,UAAU,QAAd,OAA0BQ,KAAKN,MAAME,IACnC,wBAAIJ,UAAU,QAAd,YAA+BQ,KAAKN,MAAMC,QAC1C,wBAAIH,UAAU,QAAd,UAA6BQ,KAAKN,MAAMG,SACxC,wBAAIL,UAAU,QAAd,aAAgCQ,KAAKN,MAAMI,KAC3C,wBAAIN,UAAU,QAAd,cAAiCQ,KAAKN,MAAMK,KAC5C,4C,GAvDQgB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACLF,QAAQE,MAAMA,EAAMkB,c","file":"static/js/main.b5a1b39c.chunk.js","sourcesContent":["import React from 'react'\r\n//import {Switch,Redirect} from 'react-router-dom'\r\n\r\nexport default function Navbar() {\r\n  return(\r\n  <header className='navbar'>\r\n        <div className='navbar__title navbar__item'>YourIP</div>\r\n        <div className='navbar__item'>Developed by</div>\r\n        <div className='navbar__item'>Vivek Chauhan</div>\r\n           \r\n    </header>)\r\n}\r\n","import React from 'react'\r\nimport './App.css';\r\nimport axios from 'axios';\r\n//import { Navbar } from 'react-bootstrap';\r\nimport Navbar from './Navbar';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    advice: '',\r\n    ip:'',\r\n    zipcode:'',\r\n    lat:'',\r\n    log:'',\r\n  }\r\n\r\n   componentDidMount() {\r\n     this.fetchAdvice();\r\n  }\r\n\r\n   fetchAdvice(){\r\n     axios.get('https://ipapi.co/json/')\r\n      .then((response) => {\r\n        const advice = response.data.country_name;\r\n        const ip = response.data.ip;\r\n        const zipcode=response.data.region;\r\n        const lat=response.data.latitude;\r\n        const log=response.data.longitude;\r\n        this.setState({ advice });\r\n        this.setState({ ip });\r\n        this.setState({ zipcode });\r\n        this.setState({ lat });\r\n        this.setState({ log });\r\n        //console.log(response.data.country);\r\n        console.log(advice);\r\n        console.log(ip);\r\n        console.log(zipcode);\r\n        console.log(lat);\r\n        console.log(log);\r\n\r\n\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n       \r\n\r\n      <div className=\"app\">\r\n        \r\n        <Navbar/>\r\n       \r\n       \r\n        <div className=\"card\">\r\n        <h2 className=\"cont\">IP: {this.state.ip}</h2>\r\n          <h2 className=\"cont\">Country: {this.state.advice}</h2>\r\n          <h2 className=\"cont\">State: {this.state.zipcode}</h2>\r\n          <h2 className=\"cont\">Latitude: {this.state.lat}</h2>\r\n          <h2 className=\"cont\">Longitude: {this.state.log}</h2>\r\n          <h2>trying</h2>\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}